doctype html
head
  meta(charset='UTF-8')
  meta(name='viewport' content='width=device-width, initial-scale=1.0')
  title Dynamic Scrolling Window
  link(rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css')
  style.
    /* Style for the black window */
    .window {
    height: 35vh; /* 1/4 of the viewport height */
    width: 100%; /* Full width */
    background-color: black;
    overflow: hidden; /* Hide overflowing content */
    padding: 20px; /* Add padding for better display */
    box-sizing: border-box; /* Include padding in the width */
    position: relative; /* Position for absolute elements */
    color: white;
    }
    .inner-container {
    display: inline-block;
    white-space: nowrap;
    transition: transform 1s linear; /* Smooth scrolling transition */
    }
    /* Style for the key-value pairs */
    .key-value {
    margin: 10px;
    padding: 10px;
    color: white;
    display: inline-block;
    }
    .key {
    font-weight: bold;
    color: #ffcc00; /* Yellow */
    }
    .value {
    color: #00ccff; /* Blue */
    }

include navBar
.window
  #dynamic-content.inner-container


    script.
      // Function to update data
      function updateData() {
        fetch('/serverDynamicData')
          .then(response => response.json())
        
          .then(data => {
            const innerContainer = document.getElementById('dynamic-content');
            innerContainer.innerHTML = '';
            console.log(data)
            data.dataToUpdate.forEach((dataObject) => {
              const keyValueElement = document.createElement('div');
              keyValueElement.className = 'key-value';

              for (const [key, value] of Object.entries(dataObject)) {
                const keyElement = document.createElement('div');
                keyElement.className = 'key';
                keyElement.textContent = `${key}:`;

                const valueElement = document.createElement('div');
                valueElement.className = 'value';
                valueElement.textContent = value;

                keyValueElement.appendChild(keyElement);
                keyValueElement.appendChild(valueElement);
              }

              innerContainer.appendChild(keyValueElement);
            });
          })
          .catch(error => console.error('Error fetching data:from ff', error));
      }

      // Update data initially
      updateData();

      // Update data every 5 seconds (adjust as needed)
      setInterval(updateData,5000);